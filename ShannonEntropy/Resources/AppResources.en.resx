<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutUs" xml:space="preserve">
    <value>About...</value>
  </data>
  <data name="Alert" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="AllowAccess" xml:space="preserve">
    <value>Please grant access</value>
  </data>
  <data name="BigFile" xml:space="preserve">
    <value>The selected file exceeds 20 Mbs opening very large files could cause the application to be interrupted due to operating system restrictions or even crash the device
Continue?</value>
  </data>
  <data name="BuyMeACoffe" xml:space="preserve">
    <value>Buy me a Coffe</value>
  </data>
  <data name="CalculateEntropy" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Change to Spanish</value>
  </data>
  <data name="Clean" xml:space="preserve">
    <value>Clean</value>
  </data>
  <data name="CleanTextAsk" xml:space="preserve">
    <value>¿Clear text?</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="DevelopedBy" xml:space="preserve">
    <value>Developed by: Jonathan Eduardo G.G</value>
  </data>
  <data name="DevelopedFor" xml:space="preserve">
    <value>This App was developed for didactic purposes by simply illustrating Shannon's entropy.</value>
  </data>
  <data name="EquiProbable" xml:space="preserve">
    <value>Equiprobable events</value>
  </data>
  <data name="ErrorPickingFile" xml:space="preserve">
    <value>There was an error while opening this file, try another one</value>
  </data>
  <data name="Event1" xml:space="preserve">
    <value>Event #1</value>
  </data>
  <data name="Event2" xml:space="preserve">
    <value>Event #2</value>
  </data>
  <data name="FrecuencyEntropy" xml:space="preserve">
    <value>Frequency vs entropy</value>
  </data>
  <data name="FrecuencyEntropySubtitle" xml:space="preserve">
    <value>The probability of each event in relation to the final entropy</value>
  </data>
  <data name="FromPhoto" xml:space="preserve">
    <value>Entropy of a photo</value>
  </data>
  <data name="FromPhotoSubtitle" xml:space="preserve">
    <value>A measure that represents the probability distribution of gray values</value>
  </data>
  <data name="FromText" xml:space="preserve">
    <value>Entropy of text</value>
  </data>
  <data name="FromTextSubtitle" xml:space="preserve">
    <value>Represents the number of bits required to encode the message using a optimal encoder</value>
  </data>
  <data name="GitHub" xml:space="preserve">
    <value>Take a look at the project on Github</value>
  </data>
  <data name="GrantCamera" xml:space="preserve">
    <value>Allows access to the camera so you can take photos of your surroundings and calculate his entropy</value>
  </data>
  <data name="GrantPhotos" xml:space="preserve">
    <value>Allows access to the gallery so you can select photos from your device and calculate their entropy</value>
  </data>
  <data name="HasDeniedCamera" xml:space="preserve">
    <value>You have disabled camera permisson for this application, to enable go to settings  app and activate camera under the permissions menu.</value>
  </data>
  <data name="HasDeniedPhotos" xml:space="preserve">
    <value>You have disabled photos gallery permisson for this application, to enable go to settings app and activate it under the permissions menu.</value>
  </data>
  <data name="HasDeniedStorage" xml:space="preserve">
    <value>You have disabled camera permisson for this application, to enable go to settings  app and activate storage under the permissions menu.</value>
  </data>
  <data name="HystogramChannel" xml:space="preserve">
    <value>Hystogram by channel</value>
  </data>
  <data name="ItsAFileNotAnImage" xml:space="preserve">
    <value>The selected file is a text document, calculate the entropy of text instead?</value>
  </data>
  <data name="ItsAnImageNotAFile" xml:space="preserve">
    <value>The selected file is an image, calculate the entropy of image instead?</value>
  </data>
  <data name="Licenses" xml:space="preserve">
    <value>Licenses and credits</value>
  </data>
  <data name="MainTitle" xml:space="preserve">
    <value>Shannon's entropy</value>
  </data>
  <data name="NotPlainTextFile" xml:space="preserve">
    <value>The selected file is not a plain text file, continuing may result in unexpected results. 
Continue?</value>
  </data>
  <data name="OpenFile" xml:space="preserve">
    <value>Pick file</value>
  </data>
  <data name="PleaseWait" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="Privacy" xml:space="preserve">
    <value>We will never see or share your photos.</value>
  </data>
  <data name="ReportBug" xml:space="preserve">
    <value>Report a bug</value>
  </data>
  <data name="RequestFeature" xml:space="preserve">
    <value>Request a new feature</value>
  </data>
  <data name="Samples" xml:space="preserve">
    <value>Samples</value>
  </data>
  <data name="SpecialThanks" xml:space="preserve">
    <value>Special thanks to "Tapia Sanchez Daniel" for his excellent teacher labor .</value>
  </data>
  <data name="TakePhoto" xml:space="preserve">
    <value>Take photo</value>
  </data>
  <data name="Theory" xml:space="preserve">
    <value>Theoretical foundation</value>
  </data>
  <data name="Theory01" xml:space="preserve">
    <value>In information theory, the </value>
  </data>
  <data name="Theory02" xml:space="preserve">
    <value>entropy </value>
  </data>
  <data name="Theory03" xml:space="preserve">
    <value>of a random variable is the average level of "information", "surprise", or "uncertainty" inherent in the variable's possible outcomes. The concept of information entropy was introduced by </value>
  </data>
  <data name="Theory04" xml:space="preserve">
    <value>in his 1948 paper "A Mathematical Theory of Communication",and is sometimes called </value>
  </data>
  <data name="Theory05" xml:space="preserve">
    <value>Shannon entropy </value>
  </data>
  <data name="Theory06" xml:space="preserve">
    <value>in his honour. </value>
  </data>
  <data name="Theory07" xml:space="preserve">
    <value>As an example, consider a biased coin with probability p of landing on heads and probability 1-p of landing on tails. The maximum surprise is for p = 1/2, when there is no reason to expect one outcome over another, and in this case a coin flip has an entropy of one bit. The minimum surprise is when p = 0 or p = 1, when the event is known and the entropy is zero bits. Other values of p give different entropies between zero and one bits. </value>
  </data>
  <data name="Theory08" xml:space="preserve">
    <value>Formula</value>
  </data>
  <data name="Theory09" xml:space="preserve">
    <value>Given a discrete random variable </value>
  </data>
  <data name="Theory10" xml:space="preserve">
    <value>,with possible outcomes </value>
  </data>
  <data name="Theory11" xml:space="preserve">
    <value>,which occur with probability </value>
  </data>
  <data name="Theory12" xml:space="preserve">
    <value>the entropy of </value>
  </data>
  <data name="Theory13" xml:space="preserve">
    <value>is formally defined as: </value>
  </data>
  <data name="Theory14" xml:space="preserve">
    <value>where Sigma denotes the sum over the variable's possible values and log  is the logarithm, the choice of base varying between different applications. Base 2 gives the unit of bits (or "shannons"), while base e gives the "natural units" nat, and base 10 gives a unit called "dits", "bans", or "hartleys". </value>
  </data>
  <data name="TotalEntropy" xml:space="preserve">
    <value>Total Entropy</value>
  </data>
  <data name="WaitASecond" xml:space="preserve">
    <value>Wait...</value>
  </data>
  <data name="WeAreSorry" xml:space="preserve">
    <value>Oops...</value>
  </data>
  <data name="Xamarin" xml:space="preserve">
    <value>Built with Xamarin.Forms cross-platform technology</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="YouCanDisableThis" xml:space="preserve">
    <value>*You can change this option later on settings app</value>
  </data>
</root>